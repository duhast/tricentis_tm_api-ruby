=begin
#TTM for Jira

#Tricentis Test Management for Jira

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'spec_helper'
require 'json'

# Unit tests for TricentisTmApi::TestRunsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'TestRunsApi' do
  before do
    # run before each test
    @api_instance = TricentisTmApi::TestRunsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of TestRunsApi' do
    it 'should create an instance of TestRunsApi' do
      expect(@api_instance).to be_instance_of(TricentisTmApi::TestRunsApi)
    end
  end

  # unit tests for v1_projects_project_key_import_execution_junit_post
  # Create test runs from junit xml string.
  # ## Import test run(s) (execution result) from JUnit XML string.  #### Body:  The body should be the XML content of the JUnit XML file.  #### Query parameters:  * **version** _(optional)_: Specify the version name which the test runs will be under.  * **cycleName** _(optional)_: cycle name to specify.  if not provided, it will take the it from the \&quot;name\&quot; attribute of the \&quot;testsuites\&quot; XML tag in case it exists.  if nothing provided, it will generate a name like \&quot;Junit execution (current date)\&quot;.
  # @param project_key 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :version version.
  # @option opts [String] :cycle_name cycleName.
  # @option opts [V1ProjectsProjectKeyImportExecutionJunitPostRequest] :v1_projects_project_key_import_execution_junit_post_request junitXml.
  # @return [Array<V1ProjectsProjectKeyTestRunsPost200ResponseInner>]
  describe 'v1_projects_project_key_import_execution_junit_post test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_projects_project_key_test_runs_post
  # Create test run(s).
  # ## Create or import test run(s).  ##### Note: Release versions are managed in Jira.                #### Body fields:  * **version** _(optional)_: Specify the version name which the test runs will be under.  If version won&#39;t be provided OR version will be equal to unversioned, the test runs will be created under unversioned.  (creating and editing of releases (versions) are managed in Jira).  * **cycleName** _(optional)_: Specify the cycle name which the test runs will be under.  * **includeAttachments** _(optional)_: Specify if to include attachments (default value: false).  Cycle must be provided here or under test runs (for each test runs).  * **testRuns** _(mandatory)_: Provide a list of test runs, with each test having the following fields:      * **testCaseKey** _(mandatory)_: test case key that the test run will be linked to.      * **status** _(mandatory)_: the status of the test run. Status of test runs is defined in JIRA under the admin page.      * **name** _(optional)_: name of the test run.      * **description** _(optional)_: description of the test run.      * **priority** _(mandatory)_: priority of the test run (\&quot;Highes\&quot;,\&quot;Low\&quot;,etc..).      * **testCategory** _(mandatory)_: The test run category of the test run (\&quot;Functional\&quot; or \&quot;NonFunctional\&quot;).      * **testType** _(mandatory)_: the test type of the test run (Manual, Automated).      * **cycleName** _(optional)_: specify the cycle name which the test runs will be under.      Cycle must be provided here or above testRuns in cycleName.      * **assignee** _(optional)_: the username which the test run will be assigned to.      * **executedBy** _(optional)_: the username which the test run is executed by.      * **automation** _(optional)_: the automation content of the test run.      In case TestType is Manual, Automation will be ignore (Manual test run can&#39;t contain automation content).          * **name** _(optional)_: the name of automation tool.          * **id** _(optional)_: the id of the test run in the automation tool.          * **content** _(mandatory)_: the test run automation content.      * **plannedStartDate** _(optional)_: the test run planned start date.      * **plannedEndDate** _(optional)_: the test run planned end date.      * **components** _(optional)_: the test runs components.      * **labels** _(optional)_: the test runs labels.      * **steps** _(optional)_: list of steps of the test run.      In case TestType is Automated, and Steps will be provided (Test Run will contain Steps and Automation).          * **status** _(mandatory)_: the status of the test run step.          * **actualResult** _(optional)_: the actual result of the steps.          * **comment** _(optional)_: the test run step&#39;s comment.          * **data** _(optional)_: the test run step&#39;s data.          * **description** _(optional)_: the test run step&#39;s description.          * **expectedResult** _(optional)_: the test run step&#39;s expectedResult.      * **fields** _(optional)_: list of fields of the test run.      In case the field is List type (like Environments) allowedValueName must be provided, otherwise (like execution timer) &#39;value&#39; must be provided.          * **schemeName** _(mandatory)_: the scheme name of the field (for example Execution Timer or Environments).          * **allowedValueName** _(optional)_: the allowed value of the scheme (for example Development).          * **value** _(optional)_: the value of the scheme (for example 130).
  # @param project_key 
  # @param [Hash] opts the optional parameters
  # @option opts [V1ProjectsProjectKeyTestRunsPostRequest] :v1_projects_project_key_test_runs_post_request testRuns.
  # @return [Array<V1ProjectsProjectKeyTestRunsPost200ResponseInner>]
  describe 'v1_projects_project_key_test_runs_post test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_projects_project_key_test_runs_search_post
  # Read test run(s).
  # ## Get or retrieve information from test run(s).                #### Body fields:  * **cycles** _(optional)_: Specify the cycles to filter by the result.  * **keys** _(optional)_: Specify the test runs keys to filter by the result.  * **expand** _(optional)_: Specify which fields will return additionaly for each Test Run.                Allowed values: \&quot;Steps\&quot; - The test run steps.
  # @param project_key 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :offset Numeric value that determines that the result list will start from result #N (zero based)
  # @option opts [Integer] :limit Numeric value that determines that maximum N results will be returned
  # @option opts [V1ProjectsProjectKeyTestRunsSearchPostRequest] :v1_projects_project_key_test_runs_search_post_request Test Runs Search filters.
  # @return [V1ProjectsProjectKeyTestRunsSearchPost200Response]
  describe 'v1_projects_project_key_test_runs_search_post test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_projects_project_key_test_runs_test_run_key_delete
  # Delete test run(s).
  # ## Delete existing test run(s).
  # @param test_run_key Test Run Key.
  # @param project_key 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'v1_projects_project_key_test_runs_test_run_key_delete test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_projects_project_key_test_runs_test_run_key_put
  # Update test run(s).
  # ## Update an existing test run.  ##### Note: Any values you enter will override existing values in the test run.                #### Body fields:  * **testCategory** _(optional)_: The test run category of the test run (\&quot;Functional\&quot; or \&quot;NonFunctional\&quot;).  * **executedBy** _(optional)_: the username which the test run is executed by.  * **assignee** _(optional)_: the username which the test run will be assigned to.  * **priority** _(optional)_: priority of the test run (\&quot;Highes\&quot;,\&quot;Low\&quot;,etc..).  * **status** _(optional)_: the status of the test run. Status of test runs is defined in JIRA under the admin page. Mandatory field.  * **plannedStartDate** _(optional)_: the test run planned start date.  * **plannedEndDate** _(optional)_: the test run planned end date.  * **cycleId** _(optional)_: specify the cycle Id which the test runs will be under.  * **components** _(optional)_: the test runs components.  * **labels** _(optional)_: the test runs labels.  * **steps** _(optional)_: list of steps of the test run.  In case TestType is Automated, Steps will be ignore (Automated test run can&#39;t contain steps).      * **status** _(mandatory)_: the status of the test run step.      * **actualResult** _(optional)_: the actual result of the steps.      * **comment** _(optional)_: the test run step&#39;s comment.      * **data** _(optional)_: the test run step&#39;s data.      * **description** _(optional)_: the test run step&#39;s description.      * **expectedResult** _(optional)_: the test run step&#39;s expectedResult.      * **fields** _(optional)_: list of fields of the test run.      In case the field is List type (like Environments) allowedValueName must be provided, otherwise (like execution timer) &#39;value&#39; must be provided.          * **schemeName** _(mandatory)_: the scheme name of the field (for example Execution Timer or Environments).          * **allowedValueName** _(optional)_: the allowed value of the scheme (for example Development).          * **value** _(optional)_: the value of the scheme (for example 130).
  # @param test_run_key Test Run Key.
  # @param project_key 
  # @param [Hash] opts the optional parameters
  # @option opts [V1ProjectsProjectKeyTestRunsTestRunKeyPutRequest] :v1_projects_project_key_test_runs_test_run_key_put_request Patch document.
  # @return [nil]
  describe 'v1_projects_project_key_test_runs_test_run_key_put test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
