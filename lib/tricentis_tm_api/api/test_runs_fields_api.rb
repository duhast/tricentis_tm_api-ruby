=begin
#TTM for Jira

#Tricentis Test Management for Jira

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'cgi'

module TricentisTmApi
  class TestRunsFieldsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete allowed value from scheme.
    # ## Delete allowed value from scheme.  ##### Note: Allowed Scheme names: Environments, Builds.
    # @param scheme_name [String] The scheme name (Environments, Builds).
    # @param allowed_value_name [String] allowedValueName.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v1_test_runs_scheme_scheme_name_allowed_values_allowed_value_name_delete(scheme_name, allowed_value_name, opts = {})
      v1_test_runs_scheme_scheme_name_allowed_values_allowed_value_name_delete_with_http_info(scheme_name, allowed_value_name, opts)
      nil
    end

    # Delete allowed value from scheme.
    # ## Delete allowed value from scheme.  ##### Note: Allowed Scheme names: Environments, Builds.
    # @param scheme_name [String] The scheme name (Environments, Builds).
    # @param allowed_value_name [String] allowedValueName.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def v1_test_runs_scheme_scheme_name_allowed_values_allowed_value_name_delete_with_http_info(scheme_name, allowed_value_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestRunsFieldsApi.v1_test_runs_scheme_scheme_name_allowed_values_allowed_value_name_delete ...'
      end
      # verify the required parameter 'scheme_name' is set
      if @api_client.config.client_side_validation && scheme_name.nil?
        fail ArgumentError, "Missing the required parameter 'scheme_name' when calling TestRunsFieldsApi.v1_test_runs_scheme_scheme_name_allowed_values_allowed_value_name_delete"
      end
      # verify the required parameter 'allowed_value_name' is set
      if @api_client.config.client_side_validation && allowed_value_name.nil?
        fail ArgumentError, "Missing the required parameter 'allowed_value_name' when calling TestRunsFieldsApi.v1_test_runs_scheme_scheme_name_allowed_values_allowed_value_name_delete"
      end
      # resource path
      local_var_path = '/v1/test-runs/scheme/{schemeName}/allowed-values/{allowedValueName}'.sub('{' + 'schemeName' + '}', CGI.escape(scheme_name.to_s)).sub('{' + 'allowedValueName' + '}', CGI.escape(allowed_value_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"TestRunsFieldsApi.v1_test_runs_scheme_scheme_name_allowed_values_allowed_value_name_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestRunsFieldsApi#v1_test_runs_scheme_scheme_name_allowed_values_allowed_value_name_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add allowed value to scheme.
    # ## Add allowed value to scheme.  ##### Note: Allowed Scheme names: Environments, Builds.  ##### In case of trying to add existing allowed value, it will be ignored (duplicates are not allowed) and the response will be 200.                #### Body fields:  * **allowedValues** _(mandatory)_: Provide a list of allowed values, with each value having the following fields:      * **name** _(mandatory)_: name of the allowed value.      * **description** _(optional)_: allowed value description.
    # @param scheme_name [String] The scheme name (Environments, Builds).
    # @param [Hash] opts the optional parameters
    # @option opts [Array<V1TestRunsSchemeSchemeNameAllowedValuesPostRequestInner>] :v1_test_runs_scheme_scheme_name_allowed_values_post_request_inner allowedValueApiData.
    # @return [nil]
    def v1_test_runs_scheme_scheme_name_allowed_values_post(scheme_name, opts = {})
      v1_test_runs_scheme_scheme_name_allowed_values_post_with_http_info(scheme_name, opts)
      nil
    end

    # Add allowed value to scheme.
    # ## Add allowed value to scheme.  ##### Note: Allowed Scheme names: Environments, Builds.  ##### In case of trying to add existing allowed value, it will be ignored (duplicates are not allowed) and the response will be 200.                #### Body fields:  * **allowedValues** _(mandatory)_: Provide a list of allowed values, with each value having the following fields:      * **name** _(mandatory)_: name of the allowed value.      * **description** _(optional)_: allowed value description.
    # @param scheme_name [String] The scheme name (Environments, Builds).
    # @param [Hash] opts the optional parameters
    # @option opts [Array<V1TestRunsSchemeSchemeNameAllowedValuesPostRequestInner>] :v1_test_runs_scheme_scheme_name_allowed_values_post_request_inner allowedValueApiData.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def v1_test_runs_scheme_scheme_name_allowed_values_post_with_http_info(scheme_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestRunsFieldsApi.v1_test_runs_scheme_scheme_name_allowed_values_post ...'
      end
      # verify the required parameter 'scheme_name' is set
      if @api_client.config.client_side_validation && scheme_name.nil?
        fail ArgumentError, "Missing the required parameter 'scheme_name' when calling TestRunsFieldsApi.v1_test_runs_scheme_scheme_name_allowed_values_post"
      end
      # resource path
      local_var_path = '/v1/test-runs/scheme/{schemeName}/allowed-values'.sub('{' + 'schemeName' + '}', CGI.escape(scheme_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'v1_test_runs_scheme_scheme_name_allowed_values_post_request_inner'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"TestRunsFieldsApi.v1_test_runs_scheme_scheme_name_allowed_values_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestRunsFieldsApi#v1_test_runs_scheme_scheme_name_allowed_values_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
