=begin
#TTM for Jira

#Tricentis Test Management for Jira

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'cgi'

module TricentisTmApi
  class RequirementsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Link Requirements to test case.
    # ## Link Requirements to test case.                #### Body fields:  * **issueKey** _(mandatory)_: the issue key.
    # @param key [String] jiraTestKey.
    # @param project_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<V1ProjectsProjectKeyTestCasesKeyRequirementLinkPostRequestInner>] :v1_projects_project_key_test_cases_key_requirement_link_post_request_inner requirements to link.
    # @return [Array<V1ProjectsProjectKeyTestCasesRequirementsPost200ResponseInner>]
    def v1_projects_project_key_test_cases_key_requirement_link_post(key, project_key, opts = {})
      data, _status_code, _headers = v1_projects_project_key_test_cases_key_requirement_link_post_with_http_info(key, project_key, opts)
      data
    end

    # Link Requirements to test case.
    # ## Link Requirements to test case.                #### Body fields:  * **issueKey** _(mandatory)_: the issue key.
    # @param key [String] jiraTestKey.
    # @param project_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<V1ProjectsProjectKeyTestCasesKeyRequirementLinkPostRequestInner>] :v1_projects_project_key_test_cases_key_requirement_link_post_request_inner requirements to link.
    # @return [Array<(Array<V1ProjectsProjectKeyTestCasesRequirementsPost200ResponseInner>, Integer, Hash)>] Array<V1ProjectsProjectKeyTestCasesRequirementsPost200ResponseInner> data, response status code and response headers
    def v1_projects_project_key_test_cases_key_requirement_link_post_with_http_info(key, project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RequirementsApi.v1_projects_project_key_test_cases_key_requirement_link_post ...'
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling RequirementsApi.v1_projects_project_key_test_cases_key_requirement_link_post"
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling RequirementsApi.v1_projects_project_key_test_cases_key_requirement_link_post"
      end
      # resource path
      local_var_path = '/v1/projects/{project-key}/test-cases/{key}/requirement/link'.sub('{' + 'key' + '}', CGI.escape(key.to_s)).sub('{' + 'project-key' + '}', CGI.escape(project_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'v1_projects_project_key_test_cases_key_requirement_link_post_request_inner'])

      # return_type
      return_type = opts[:debug_return_type] || 'Array<V1ProjectsProjectKeyTestCasesRequirementsPost200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"RequirementsApi.v1_projects_project_key_test_cases_key_requirement_link_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RequirementsApi#v1_projects_project_key_test_cases_key_requirement_link_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Requirements and link to test case.
    # ## Create Requirements and link to test case.  ##### Note: In case issue type won't be provided, default value will be \"Requirement\" issue type.                #### Body fields:  * **summary** _(mandatory)_: the requirement summary.  * **description** _(optional)_: the requirement description.  * **issueType** _(optional)_: the requirement issue type (for example: Task, Requirement, Bug, etc..).
    # @param key [String] jiraTestKey.
    # @param project_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<V1ProjectsProjectKeyTestCasesRequirementsPostRequestInner>] :v1_projects_project_key_test_cases_requirements_post_request_inner requirements to create.
    # @return [Array<V1ProjectsProjectKeyTestCasesRequirementsPost200ResponseInner>]
    def v1_projects_project_key_test_cases_key_requirements_post(key, project_key, opts = {})
      data, _status_code, _headers = v1_projects_project_key_test_cases_key_requirements_post_with_http_info(key, project_key, opts)
      data
    end

    # Create Requirements and link to test case.
    # ## Create Requirements and link to test case.  ##### Note: In case issue type won&#39;t be provided, default value will be \&quot;Requirement\&quot; issue type.                #### Body fields:  * **summary** _(mandatory)_: the requirement summary.  * **description** _(optional)_: the requirement description.  * **issueType** _(optional)_: the requirement issue type (for example: Task, Requirement, Bug, etc..).
    # @param key [String] jiraTestKey.
    # @param project_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<V1ProjectsProjectKeyTestCasesRequirementsPostRequestInner>] :v1_projects_project_key_test_cases_requirements_post_request_inner requirements to create.
    # @return [Array<(Array<V1ProjectsProjectKeyTestCasesRequirementsPost200ResponseInner>, Integer, Hash)>] Array<V1ProjectsProjectKeyTestCasesRequirementsPost200ResponseInner> data, response status code and response headers
    def v1_projects_project_key_test_cases_key_requirements_post_with_http_info(key, project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RequirementsApi.v1_projects_project_key_test_cases_key_requirements_post ...'
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling RequirementsApi.v1_projects_project_key_test_cases_key_requirements_post"
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling RequirementsApi.v1_projects_project_key_test_cases_key_requirements_post"
      end
      # resource path
      local_var_path = '/v1/projects/{project-key}/test-cases/{key}/requirements'.sub('{' + 'key' + '}', CGI.escape(key.to_s)).sub('{' + 'project-key' + '}', CGI.escape(project_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'v1_projects_project_key_test_cases_requirements_post_request_inner'])

      # return_type
      return_type = opts[:debug_return_type] || 'Array<V1ProjectsProjectKeyTestCasesRequirementsPost200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"RequirementsApi.v1_projects_project_key_test_cases_key_requirements_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RequirementsApi#v1_projects_project_key_test_cases_key_requirements_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Requirements.
    # ## Create Requirements and link to test case.  ##### Note: In case issue type won't be provided, default value will be \"Requirement\" issue type.                #### Body fields:  * **summary** _(mandatory)_: the requirement summary.  * **description** _(optional)_: the requirement description.  * **issueType** _(optional)_: the requirement issue type (for example: Task, Requirement, Bug, etc..).
    # @param project_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<V1ProjectsProjectKeyTestCasesRequirementsPostRequestInner>] :v1_projects_project_key_test_cases_requirements_post_request_inner requirements to create.
    # @return [Array<V1ProjectsProjectKeyTestCasesRequirementsPost200ResponseInner>]
    def v1_projects_project_key_test_cases_requirements_post(project_key, opts = {})
      data, _status_code, _headers = v1_projects_project_key_test_cases_requirements_post_with_http_info(project_key, opts)
      data
    end

    # Create Requirements.
    # ## Create Requirements and link to test case.  ##### Note: In case issue type won&#39;t be provided, default value will be \&quot;Requirement\&quot; issue type.                #### Body fields:  * **summary** _(mandatory)_: the requirement summary.  * **description** _(optional)_: the requirement description.  * **issueType** _(optional)_: the requirement issue type (for example: Task, Requirement, Bug, etc..).
    # @param project_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<V1ProjectsProjectKeyTestCasesRequirementsPostRequestInner>] :v1_projects_project_key_test_cases_requirements_post_request_inner requirements to create.
    # @return [Array<(Array<V1ProjectsProjectKeyTestCasesRequirementsPost200ResponseInner>, Integer, Hash)>] Array<V1ProjectsProjectKeyTestCasesRequirementsPost200ResponseInner> data, response status code and response headers
    def v1_projects_project_key_test_cases_requirements_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RequirementsApi.v1_projects_project_key_test_cases_requirements_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling RequirementsApi.v1_projects_project_key_test_cases_requirements_post"
      end
      # resource path
      local_var_path = '/v1/projects/{project-key}/test-cases/requirements'.sub('{' + 'project-key' + '}', CGI.escape(project_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'v1_projects_project_key_test_cases_requirements_post_request_inner'])

      # return_type
      return_type = opts[:debug_return_type] || 'Array<V1ProjectsProjectKeyTestCasesRequirementsPost200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"RequirementsApi.v1_projects_project_key_test_cases_requirements_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RequirementsApi#v1_projects_project_key_test_cases_requirements_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
