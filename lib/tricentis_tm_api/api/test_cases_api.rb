=begin
#TTM for Jira

#Tricentis Test Management for Jira

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'cgi'

module TricentisTmApi
  class TestCasesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Query job status.
    # ## Query the status of an asynchronous job to create or import test case(s).
    # @param job_id [String] The job ID returned from the import request endpoint.
    # @param project_key [String] 
    # @param [Hash] opts the optional parameters
    # @return [V1ProjectsProjectKeyJobsJobIdGet200Response]
    def v1_projects_project_key_jobs_job_id_get(job_id, project_key, opts = {})
      data, _status_code, _headers = v1_projects_project_key_jobs_job_id_get_with_http_info(job_id, project_key, opts)
      data
    end

    # Query job status.
    # ## Query the status of an asynchronous job to create or import test case(s).
    # @param job_id [String] The job ID returned from the import request endpoint.
    # @param project_key [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V1ProjectsProjectKeyJobsJobIdGet200Response, Integer, Hash)>] V1ProjectsProjectKeyJobsJobIdGet200Response data, response status code and response headers
    def v1_projects_project_key_jobs_job_id_get_with_http_info(job_id, project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestCasesApi.v1_projects_project_key_jobs_job_id_get ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling TestCasesApi.v1_projects_project_key_jobs_job_id_get"
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling TestCasesApi.v1_projects_project_key_jobs_job_id_get"
      end
      # resource path
      local_var_path = '/v1/projects/{project-key}/jobs/{job-id}'.sub('{' + 'job-id' + '}', CGI.escape(job_id.to_s)).sub('{' + 'project-key' + '}', CGI.escape(project_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'V1ProjectsProjectKeyJobsJobIdGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"TestCasesApi.v1_projects_project_key_jobs_job_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestCasesApi#v1_projects_project_key_jobs_job_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read test case(s).
    # ## Get or retrieve information from test case(s).                #### Body fields:  * **jiraFields**: a comma-separated list of Jira fields to return for each issue. Use this to retrieve a subset of fields.  * **ttmFields**: a comma-separated list of Jira fields to return for each issue. Use this to retrieve a subset of fields.
    # @param project_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :jira_fields A list of Jira fields to return for each issue, use it to retrieve a subset of fields. Provide a comma-separated list.
    # @option opts [String] :ttm_fields A list of TTM fields to return for each issue, use it to retrieve a subset of fields. Provide a comma-separated list.
    # @option opts [Integer] :offset Numeric value that determines that the result list will start from result #N (zero based)
    # @option opts [Integer] :limit Numeric value that determines that maximum N results will be returned
    # @return [V1ProjectsProjectKeyTestCasesGet200Response]
    def v1_projects_project_key_test_cases_get(project_key, opts = {})
      data, _status_code, _headers = v1_projects_project_key_test_cases_get_with_http_info(project_key, opts)
      data
    end

    # Read test case(s).
    # ## Get or retrieve information from test case(s).                #### Body fields:  * **jiraFields**: a comma-separated list of Jira fields to return for each issue. Use this to retrieve a subset of fields.  * **ttmFields**: a comma-separated list of Jira fields to return for each issue. Use this to retrieve a subset of fields.
    # @param project_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :jira_fields A list of Jira fields to return for each issue, use it to retrieve a subset of fields. Provide a comma-separated list.
    # @option opts [String] :ttm_fields A list of TTM fields to return for each issue, use it to retrieve a subset of fields. Provide a comma-separated list.
    # @option opts [Integer] :offset Numeric value that determines that the result list will start from result #N (zero based)
    # @option opts [Integer] :limit Numeric value that determines that maximum N results will be returned
    # @return [Array<(V1ProjectsProjectKeyTestCasesGet200Response, Integer, Hash)>] V1ProjectsProjectKeyTestCasesGet200Response data, response status code and response headers
    def v1_projects_project_key_test_cases_get_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestCasesApi.v1_projects_project_key_test_cases_get ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling TestCasesApi.v1_projects_project_key_test_cases_get"
      end
      # resource path
      local_var_path = '/v1/projects/{project-key}/test-cases'.sub('{' + 'project-key' + '}', CGI.escape(project_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'jiraFields'] = opts[:'jira_fields'] if !opts[:'jira_fields'].nil?
      query_params[:'ttmFields'] = opts[:'ttm_fields'] if !opts[:'ttm_fields'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'V1ProjectsProjectKeyTestCasesGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"TestCasesApi.v1_projects_project_key_test_cases_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestCasesApi#v1_projects_project_key_test_cases_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add or update automation content for a test case.
    # ## Add or update automation content and details for a test case.                #### Body fields:                * **name**: The name of the automation for the test case.  * **externalId** _(optional)_: The external Id of the automated test from the external automation system.  * **key**: The Jira key of the test case .
    # @param key [String] The Jira issue key for the Test Case.
    # @param project_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :confirmation &lt;br&gt;Changing a test case from Manual to Automated overwrites your precondition and test steps.  &lt;br&gt; Select True to confirm that you want to delete the precondition and test steps from the test case. (default to false)
    # @option opts [V1ProjectsProjectKeyTestCasesGet200ResponseItemsInnerAutomation] :v1_projects_project_key_test_cases_get200_response_items_inner_automation API body payload to update a test case and add automation.
    # @return [nil]
    def v1_projects_project_key_test_cases_key_automation_put(key, project_key, opts = {})
      v1_projects_project_key_test_cases_key_automation_put_with_http_info(key, project_key, opts)
      nil
    end

    # Add or update automation content for a test case.
    # ## Add or update automation content and details for a test case.                #### Body fields:                * **name**: The name of the automation for the test case.  * **externalId** _(optional)_: The external Id of the automated test from the external automation system.  * **key**: The Jira key of the test case .
    # @param key [String] The Jira issue key for the Test Case.
    # @param project_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :confirmation &lt;br&gt;Changing a test case from Manual to Automated overwrites your precondition and test steps.  &lt;br&gt; Select True to confirm that you want to delete the precondition and test steps from the test case. (default to false)
    # @option opts [V1ProjectsProjectKeyTestCasesGet200ResponseItemsInnerAutomation] :v1_projects_project_key_test_cases_get200_response_items_inner_automation API body payload to update a test case and add automation.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def v1_projects_project_key_test_cases_key_automation_put_with_http_info(key, project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestCasesApi.v1_projects_project_key_test_cases_key_automation_put ...'
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling TestCasesApi.v1_projects_project_key_test_cases_key_automation_put"
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling TestCasesApi.v1_projects_project_key_test_cases_key_automation_put"
      end
      # resource path
      local_var_path = '/v1/projects/{project-key}/test-cases/{key}/automation'.sub('{' + 'key' + '}', CGI.escape(key.to_s)).sub('{' + 'project-key' + '}', CGI.escape(project_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'confirmation'] = opts[:'confirmation'] if !opts[:'confirmation'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'v1_projects_project_key_test_cases_get200_response_items_inner_automation'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"TestCasesApi.v1_projects_project_key_test_cases_key_automation_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestCasesApi#v1_projects_project_key_test_cases_key_automation_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete test case(s).
    # ## Delete test case(s).
    # @param key [String] The Jira id or key of the test.
    # @param project_key [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v1_projects_project_key_test_cases_key_delete(key, project_key, opts = {})
      v1_projects_project_key_test_cases_key_delete_with_http_info(key, project_key, opts)
      nil
    end

    # Delete test case(s).
    # ## Delete test case(s).
    # @param key [String] The Jira id or key of the test.
    # @param project_key [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def v1_projects_project_key_test_cases_key_delete_with_http_info(key, project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestCasesApi.v1_projects_project_key_test_cases_key_delete ...'
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling TestCasesApi.v1_projects_project_key_test_cases_key_delete"
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling TestCasesApi.v1_projects_project_key_test_cases_key_delete"
      end
      # resource path
      local_var_path = '/v1/projects/{project-key}/test-cases/{key}'.sub('{' + 'key' + '}', CGI.escape(key.to_s)).sub('{' + 'project-key' + '}', CGI.escape(project_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"TestCasesApi.v1_projects_project_key_test_cases_key_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestCasesApi#v1_projects_project_key_test_cases_key_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update test case(s).
    # ## Update existing test case(s).
    # @param key [String] The jira key of the test.
    # @param project_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [V1ProjectsProjectKeyTestCasesKeyPutRequest] :v1_projects_project_key_test_cases_key_put_request The data to update in the test.
    # @return [V1ProjectsProjectKeyTestCasesGet200ResponseItemsInner]
    def v1_projects_project_key_test_cases_key_put(key, project_key, opts = {})
      data, _status_code, _headers = v1_projects_project_key_test_cases_key_put_with_http_info(key, project_key, opts)
      data
    end

    # Update test case(s).
    # ## Update existing test case(s).
    # @param key [String] The jira key of the test.
    # @param project_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [V1ProjectsProjectKeyTestCasesKeyPutRequest] :v1_projects_project_key_test_cases_key_put_request The data to update in the test.
    # @return [Array<(V1ProjectsProjectKeyTestCasesGet200ResponseItemsInner, Integer, Hash)>] V1ProjectsProjectKeyTestCasesGet200ResponseItemsInner data, response status code and response headers
    def v1_projects_project_key_test_cases_key_put_with_http_info(key, project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestCasesApi.v1_projects_project_key_test_cases_key_put ...'
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling TestCasesApi.v1_projects_project_key_test_cases_key_put"
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling TestCasesApi.v1_projects_project_key_test_cases_key_put"
      end
      # resource path
      local_var_path = '/v1/projects/{project-key}/test-cases/{key}'.sub('{' + 'key' + '}', CGI.escape(key.to_s)).sub('{' + 'project-key' + '}', CGI.escape(project_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'v1_projects_project_key_test_cases_key_put_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'V1ProjectsProjectKeyTestCasesGet200ResponseItemsInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"TestCasesApi.v1_projects_project_key_test_cases_key_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestCasesApi#v1_projects_project_key_test_cases_key_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create test case(s).
    # ## Create test case(s).                #### Body fields:                * **folder** _(optional)_: Specify the folder path where you want to save the test case. A path is a string of concatenated parts separated by a slash \"/\".  If you don't specify a folder path, the test case saves in the \"All tests\" folder. Do not specify both the folder and the folderID, or the request will fail.  * **folderId** _(optional)_: Specify a unique ID associated with the folder in the TTM database, which specifies where the test case should be saved. Do not specify both the folder and the folderID, or the request will fail.  * **callbackUrl** _(optional)_: Specify a URL that will recevie status of the request (The URL will serve as POST endpoint in the user side).  * **tests**: Provide a list of tests with the following values:      * **fields**: The native Jira fields in a test case. The following fields are available:          * **summary**: The Summary of the test case in Jira.          * **description** _(optional)_: The Description of the test case in Jira.          * **status** _(optional)_: The Status of the test case in Jira.          * **priority** _(optional)_: The Priority of the test case in Jira.          * **labels** _(optional)_: The Labels of the test case in Jira.      * **ttmFields**: These are the Jira fields provided by the Tricentis Test Management for Jira plugin. The following fields are available:          * **precondition** _(optional)_: The precondition for a test case.          * **steps** _(optional)_: The list of steps for the test case.              * **description** _(optional)_: Step description.              * **expectedResult** _(optional)_: Step expected result.              * **data** _(optional)_: Step data.              * **testCaseKey** _(optional)_: test case key, when set the step will call the test case and other step fields will be ignored.      * **testType**: Can be one of the following: \"Manual\", \"Automated\"      * **requirements** _(optional)_: List of issues keys (from Jira) that should be linked as requirements.      * **customFields** _(optional)_: The custom Jira fields in a test case.      * **folder** _(optional)_: Specify the folder path where you want to save the test case. A path is a string of concatenated parts separated by a slash \"/\".  If you don't specify a folder path, the test case saves in the \"All tests\" folder. Do not specify both the folder and the folderID, or the request will fail. If you do not specify the folder in this field, the request uses the folder specified at the root level.      * **folderId** _(optional)_: Specify a unique ID associated with the folder in the TTM database, which specifies where the test case should be saved. Do not specify both the folder and the folderID, or the request will fail. If you do not specify the folderId in this field, the request uses the folderId specified at the root level.      * **automation** _(optional)_: Automation data. Provide the following values for your test case:          * **name**: The name of your external automation system. For example, Testim.          * **externalId** _(optional)_: The ID of the test in your external automation platform.          * **content** _(optional)_: The content your automation system supplies to represent the test.
    # @param project_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :strict_order If strict order is true, test-cases will be created according to the given order. (default to false)
    # @option opts [V1ProjectsProjectKeyTestCasesPostRequest] :v1_projects_project_key_test_cases_post_request External API body payload that describes the tests to create.
    # @return [V1ProjectsProjectKeyTestCasesPostRequest]
    def v1_projects_project_key_test_cases_post(project_key, opts = {})
      data, _status_code, _headers = v1_projects_project_key_test_cases_post_with_http_info(project_key, opts)
      data
    end

    # Create test case(s).
    # ## Create test case(s).                #### Body fields:                * **folder** _(optional)_: Specify the folder path where you want to save the test case. A path is a string of concatenated parts separated by a slash \&quot;/\&quot;.  If you don&#39;t specify a folder path, the test case saves in the \&quot;All tests\&quot; folder. Do not specify both the folder and the folderID, or the request will fail.  * **folderId** _(optional)_: Specify a unique ID associated with the folder in the TTM database, which specifies where the test case should be saved. Do not specify both the folder and the folderID, or the request will fail.  * **callbackUrl** _(optional)_: Specify a URL that will recevie status of the request (The URL will serve as POST endpoint in the user side).  * **tests**: Provide a list of tests with the following values:      * **fields**: The native Jira fields in a test case. The following fields are available:          * **summary**: The Summary of the test case in Jira.          * **description** _(optional)_: The Description of the test case in Jira.          * **status** _(optional)_: The Status of the test case in Jira.          * **priority** _(optional)_: The Priority of the test case in Jira.          * **labels** _(optional)_: The Labels of the test case in Jira.      * **ttmFields**: These are the Jira fields provided by the Tricentis Test Management for Jira plugin. The following fields are available:          * **precondition** _(optional)_: The precondition for a test case.          * **steps** _(optional)_: The list of steps for the test case.              * **description** _(optional)_: Step description.              * **expectedResult** _(optional)_: Step expected result.              * **data** _(optional)_: Step data.              * **testCaseKey** _(optional)_: test case key, when set the step will call the test case and other step fields will be ignored.      * **testType**: Can be one of the following: \&quot;Manual\&quot;, \&quot;Automated\&quot;      * **requirements** _(optional)_: List of issues keys (from Jira) that should be linked as requirements.      * **customFields** _(optional)_: The custom Jira fields in a test case.      * **folder** _(optional)_: Specify the folder path where you want to save the test case. A path is a string of concatenated parts separated by a slash \&quot;/\&quot;.  If you don&#39;t specify a folder path, the test case saves in the \&quot;All tests\&quot; folder. Do not specify both the folder and the folderID, or the request will fail. If you do not specify the folder in this field, the request uses the folder specified at the root level.      * **folderId** _(optional)_: Specify a unique ID associated with the folder in the TTM database, which specifies where the test case should be saved. Do not specify both the folder and the folderID, or the request will fail. If you do not specify the folderId in this field, the request uses the folderId specified at the root level.      * **automation** _(optional)_: Automation data. Provide the following values for your test case:          * **name**: The name of your external automation system. For example, Testim.          * **externalId** _(optional)_: The ID of the test in your external automation platform.          * **content** _(optional)_: The content your automation system supplies to represent the test.
    # @param project_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :strict_order If strict order is true, test-cases will be created according to the given order. (default to false)
    # @option opts [V1ProjectsProjectKeyTestCasesPostRequest] :v1_projects_project_key_test_cases_post_request External API body payload that describes the tests to create.
    # @return [Array<(V1ProjectsProjectKeyTestCasesPostRequest, Integer, Hash)>] V1ProjectsProjectKeyTestCasesPostRequest data, response status code and response headers
    def v1_projects_project_key_test_cases_post_with_http_info(project_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestCasesApi.v1_projects_project_key_test_cases_post ...'
      end
      # verify the required parameter 'project_key' is set
      if @api_client.config.client_side_validation && project_key.nil?
        fail ArgumentError, "Missing the required parameter 'project_key' when calling TestCasesApi.v1_projects_project_key_test_cases_post"
      end
      # resource path
      local_var_path = '/v1/projects/{project-key}/test-cases'.sub('{' + 'project-key' + '}', CGI.escape(project_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'strictOrder'] = opts[:'strict_order'] if !opts[:'strict_order'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'v1_projects_project_key_test_cases_post_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'V1ProjectsProjectKeyTestCasesPostRequest'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"TestCasesApi.v1_projects_project_key_test_cases_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestCasesApi#v1_projects_project_key_test_cases_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search test case(s).
    # ## Search for test case(s) using JQL.                #### Body fields:                * **jql** _(optional)_: The Jira Query Language (JQL) query to search.  * **jiraFields**: A comma-separated list of Jira fields to return for each issue. Use this to retrieve a subset of fields.  * **ttmFields**: A comma-separated list of TTM fields to return for each issue. Use this to retrieve a subset of fields.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :jira_fields A list of Jira fields to return for each issue, use it to retrieve a subset of fields. Provide a comma-separated list.
    # @option opts [String] :ttm_fields A list of TTM fields to return for each issue, use it to retrieve a subset of fields. Provide a comma-separated list.
    # @option opts [Integer] :offset Numeric value that determines that the result list will start from result #N (zero based)
    # @option opts [Integer] :limit Numeric value that determines that maximum N results will be returned
    # @option opts [V1TestCasesSearchPostRequest] :v1_test_cases_search_post_request The request body.
    # @return [V1ProjectsProjectKeyTestCasesGet200Response]
    def v1_test_cases_search_post(opts = {})
      data, _status_code, _headers = v1_test_cases_search_post_with_http_info(opts)
      data
    end

    # Search test case(s).
    # ## Search for test case(s) using JQL.                #### Body fields:                * **jql** _(optional)_: The Jira Query Language (JQL) query to search.  * **jiraFields**: A comma-separated list of Jira fields to return for each issue. Use this to retrieve a subset of fields.  * **ttmFields**: A comma-separated list of TTM fields to return for each issue. Use this to retrieve a subset of fields.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :jira_fields A list of Jira fields to return for each issue, use it to retrieve a subset of fields. Provide a comma-separated list.
    # @option opts [String] :ttm_fields A list of TTM fields to return for each issue, use it to retrieve a subset of fields. Provide a comma-separated list.
    # @option opts [Integer] :offset Numeric value that determines that the result list will start from result #N (zero based)
    # @option opts [Integer] :limit Numeric value that determines that maximum N results will be returned
    # @option opts [V1TestCasesSearchPostRequest] :v1_test_cases_search_post_request The request body.
    # @return [Array<(V1ProjectsProjectKeyTestCasesGet200Response, Integer, Hash)>] V1ProjectsProjectKeyTestCasesGet200Response data, response status code and response headers
    def v1_test_cases_search_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TestCasesApi.v1_test_cases_search_post ...'
      end
      # resource path
      local_var_path = '/v1/test-cases/search'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'jiraFields'] = opts[:'jira_fields'] if !opts[:'jira_fields'].nil?
      query_params[:'ttmFields'] = opts[:'ttm_fields'] if !opts[:'ttm_fields'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'v1_test_cases_search_post_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'V1ProjectsProjectKeyTestCasesGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"TestCasesApi.v1_test_cases_search_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestCasesApi#v1_test_cases_search_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
